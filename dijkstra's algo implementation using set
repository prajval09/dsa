//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        //ek dist vector create kiya hai
        vector<int>dist(V,INT_MAX);
        
        //set create kiya hai pairs ka jo store karta ho dource se kis node ko aur kitne dist ko 
        set<pair<int,int>>st;
        
        //source ke distence ko 0 karenge
        dist[S]=0;
        
            
        st.insert(make_pair(S,0));
        
        while(!st.empty())
        {
            //top element nikalo
            auto top=*(st.begin());
            
            int olddis=top.second;
            int node=top.first;
            
            st.erase(st.begin());
            
            for(auto j:adj[node])
            {
                    //agar naya distence kam hai purane wale se to
                    if((j[1]+olddis)<dist[j[0]])
                    {
                        // already exist record find karke delete karo 
                        auto record = st.find(make_pair(j[0],dist[j[0]]));
                        
                        if(record!=st.end())
                        st.erase(record);
                        
                        //aur record ko update karo
                        dist[j[0]]=j[1]+olddis;
                        st.insert(make_pair(j[0],j[1]+olddis));
                    }
                    
            }
            
        }
        return dist;
        
        
    }
};


//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}


// } Driver Code Ends
