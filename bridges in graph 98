#include<bits/stdc++.h>
void dfs(int i,int &timer,vector<int>&disc,vector<int>&low,int parent,
unordered_map<int,bool>&vis,map<int,list<int>>&adj,vector<vector<int>>&res)
{
    vis[i]=true;

    disc[i]=low[i]=timer++;

    for(auto neb:adj[i])
    {
        if(neb==parent )
        continue;
        if(!vis[neb])
        {
            dfs(neb,timer,disc,low,i,vis,adj,res);
            low[i]=min(low[neb],low[i]);

            if(low[neb]>disc[i])
            {
                vector<int>v;
                v.push_back(i);
                v.push_back(neb);
                res.push_back(v);
            }
        }
        else
        {
            low[i]=min(low[i],disc[neb]);
        }
    }
}
vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) {
    // Write your code here

    map<int,list<int>>adj;
    for(int j=0;j<edges.size();j++)
    {
            int a=edges[j][0];
            int b=edges[j][1];

            adj[a].push_back(b);
            adj[b].push_back(a);
    }

    int timer = 0;
    vector<int>disc(v);
    vector<int>low(v);
    int parent=-1;
    unordered_map<int,bool>vis;

    for(int i=0;i<v;i++)
    {
        disc[i]=-1;
        low[i]=-1;
    }

    vector<vector<int>>res;

    for(int i=0;i<v;i++)
    {
        if(!vis[i])
        {
            dfs(i,timer,disc,low,parent,vis,adj,res);
        }
    }

    return res;

}
